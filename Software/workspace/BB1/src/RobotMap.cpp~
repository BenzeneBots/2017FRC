// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveLeft;
std::shared_ptr<SpeedController> RobotMap::driveRight;
std::shared_ptr<RobotDrive> RobotMap::driveDrivetrain;
std::shared_ptr<Encoder> RobotMap::driveLeftDriveEncoder;
std::shared_ptr<Encoder> RobotMap::driveRightDriveEncoder;
std::shared_ptr<SpeedController> RobotMap::intakeIntakeMotor;
std::shared_ptr<SpeedController> RobotMap::movingFloorFloorMotor;
std::shared_ptr<SpeedController> RobotMap::climberClimberMotor;
std::shared_ptr<PowerDistributionPanel> RobotMap::climberPowerDistributionPanel1;
std::shared_ptr<DoubleSolenoid> RobotMap::shifterDriveShifter;
std::shared_ptr<CANTalon> RobotMap::shooterShooterMotor;
std::shared_ptr<Servo> RobotMap::shooterHood;
std::shared_ptr<DigitalInput> RobotMap::gearGearDetector;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveLeft.reset(new VictorSP(0));
    lw->AddActuator("Drive", "Left", std::static_pointer_cast<VictorSP>(driveLeft));
    
    driveRight.reset(new VictorSP(1));
    lw->AddActuator("Drive", "Right", std::static_pointer_cast<VictorSP>(driveRight));
    
    driveDrivetrain.reset(new RobotDrive(driveLeft, driveRight));
    
    driveDrivetrain->SetSafetyEnabled(false);
        driveDrivetrain->SetExpiration(0.1);
        driveDrivetrain->SetSensitivity(0.5);
        driveDrivetrain->SetMaxOutput(1.0);

    driveLeftDriveEncoder.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("Drive", "Left Drive Encoder", driveLeftDriveEncoder);
    driveLeftDriveEncoder->SetDistancePerPulse(0.0491);
    driveLeftDriveEncoder->SetPIDSourceType(PIDSourceType::kDisplacement);
    driveRightDriveEncoder.reset(new Encoder(2, 3, false, Encoder::k4X));
    lw->AddSensor("Drive", "Right Drive Encoder", driveRightDriveEncoder);
    driveRightDriveEncoder->SetDistancePerPulse(0.0491);
    driveRightDriveEncoder->SetPIDSourceType(PIDSourceType::kDisplacement);
    intakeIntakeMotor.reset(new VictorSP(2));
    lw->AddActuator("Intake", "IntakeMotor", std::static_pointer_cast<VictorSP>(intakeIntakeMotor));
    
    movingFloorFloorMotor.reset(new VictorSP(3));
    lw->AddActuator("Moving Floor", "FloorMotor", std::static_pointer_cast<VictorSP>(movingFloorFloorMotor));
    
    climberClimberMotor.reset(new VictorSP(4));
    lw->AddActuator("Climber", "Climber Motor", std::static_pointer_cast<VictorSP>(climberClimberMotor));
    
    climberPowerDistributionPanel1.reset(new PowerDistributionPanel(0));
    lw->AddSensor("Climber", "PowerDistributionPanel 1", climberPowerDistributionPanel1);
    
    shifterDriveShifter.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Shifter", "DriveShifter", shifterDriveShifter);
    
    shooterShooterMotor.reset(new CANTalon(11));
    lw->AddActuator("Shooter", "ShooterMotor", shooterShooterMotor);
    
    shooterHood.reset(new Servo(5));
    lw->AddActuator("Shooter", "Hood", shooterHood);
    
    gearGearDetector.reset(new DigitalInput(4));
    lw->AddSensor("Gear", "Gear Detector", gearGearDetector);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
//
