// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::drive_LeftM1;
std::shared_ptr<SpeedController> RobotMap::drive_LeftM2;
std::shared_ptr<SpeedController> RobotMap::drive_RightM1;
std::shared_ptr<SpeedController> RobotMap::drive_RightM2;
std::shared_ptr<RobotDrive> RobotMap::driveDrivetrain;
std::shared_ptr<SpeedController> RobotMap::climber_spoolM1;
std::shared_ptr<DigitalInput> RobotMap::climber_EndofRopeLimitSW;
std::shared_ptr<SpeedController> RobotMap::shooterSpeedController1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drive_LeftM1.reset(new Talon(1));
    lw->AddActuator("Drive", "_LeftM1", std::static_pointer_cast<Talon>(drive_LeftM1));
    
    drive_LeftM2.reset(new Talon(2));
    lw->AddActuator("Drive", "_LeftM2", std::static_pointer_cast<Talon>(drive_LeftM2));
    
    drive_RightM1.reset(new Talon(3));
    lw->AddActuator("Drive", "_RightM1", std::static_pointer_cast<Talon>(drive_RightM1));
    
    drive_RightM2.reset(new Talon(4));
    lw->AddActuator("Drive", "_RightM2", std::static_pointer_cast<Talon>(drive_RightM2));
    
    driveDrivetrain.reset(new RobotDrive(drive_LeftM1, drive_LeftM2,
              drive_RightM1, drive_RightM2));
    
    driveDrivetrain->SetSafetyEnabled(true);
        driveDrivetrain->SetExpiration(0.1);
        driveDrivetrain->SetSensitivity(0.5);
        driveDrivetrain->SetMaxOutput(1.0);

    climber_spoolM1.reset(new Talon(0));
    lw->AddActuator("Climber", "_spoolM1", std::static_pointer_cast<Talon>(climber_spoolM1));
    
    climber_EndofRopeLimitSW.reset(new DigitalInput(0));
    lw->AddSensor("Climber", "_End of Rope Limit SW", climber_EndofRopeLimitSW);
    
    shooterSpeedController1.reset(new Victor(5));
    lw->AddActuator("Shooter", "Speed Controller 1", std::static_pointer_cast<Victor>(shooterSpeedController1));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
