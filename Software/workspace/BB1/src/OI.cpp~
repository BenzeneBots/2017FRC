// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AgitateBalls.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/AutonomousCrossLine.h"
#include "Commands/AutonomousDriveStraight.h"
#include "Commands/AutonomousShootBalls.h"
#include "Commands/AutonomousTurnLeft.h"
#include "Commands/AutonomousTurnRight.h"
#include "Commands/DriveWithJoysticks.h"
#include "Commands/FloorLoad.h"
#include "Commands/Liftoff.h"
#include "Commands/SetGearFlap.h"
#include "Commands/ShiftGears.h"
#include "Commands/Shoot.h"
#include "Commands/Wait.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    manipulator.reset(new Joystick(1));
    
    manipY.reset(new JoystickButton(manipulator.get(), 4));
    manipY->WhenPressed(new SetGearFlap(1));
    manipB.reset(new JoystickButton(manipulator.get(), 2));
    manipB->WhenPressed(new Liftoff(1.0));
    manipX.reset(new JoystickButton(manipulator.get(), 3));
    manipX->WhenPressed(new Liftoff(0.2));
    manipRT.reset(new JoystickButton(manipulator.get(), 6));
    manipRT->WhenPressed(new FloorLoad(true));
    manipLT.reset(new JoystickButton(manipulator.get(), 5));
    manipLT->WhenPressed(new FloorLoad(false));
    manipA.reset(new JoystickButton(manipulator.get(), 1));
    manipA->WhenPressed(new Shoot());
    driver.reset(new Joystick(0));
    
    drvB.reset(new JoystickButton(driver.get(), 2));
    drvB->WhileHeld(new AutonomousDriveStraight(-2));
    drvRT.reset(new JoystickButton(driver.get(), 6));
    drvRT->WhileHeld(new ShiftGears(2));
    drvLT.reset(new JoystickButton(driver.get(), 5));
    drvLT->WhileHeld(new ShiftGears(1));

    // SmartDashboard Buttons
    SmartDashboard::PutData("AgitateBalls", new AgitateBalls());
    SmartDashboard::PutData("Shoot", new Shoot());
    SmartDashboard::PutData("Drive With Joysticks: defJoy", new DriveWithJoysticks(0, 0, 0));
    SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriver() {
   return driver;
}

std::shared_ptr<Joystick> OI::getManipulator() {
   return manipulator;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
