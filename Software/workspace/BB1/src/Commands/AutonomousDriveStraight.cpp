// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "AutonomousDriveStraight.h"
#include "Pigeon.h"

double speedAdjRate =.01;

double leftSpeed = .4;
double rightSpeed = .4;

double angle_err = 1.0;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousDriveStraight::AutonomousDriveStraight(double distance): Command() {
    m_distance = distance;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousDriveStraight::Initialize() {
	Robot::drive->ResetEncoders(); //Resets encoders so that they start at 0
	ResetYaw(); //resets the gyro to see the starting position as 0.
}

// Called repeatedly when this Command is scheduled to run
void AutonomousDriveStraight::Execute() {

	if (abs(GetYaw()) > angle_err) {   // are we off track ?
		if(m_distance >= 0){	//if going forward
			if (GetYaw() > angle_err) { // veering right
        	        leftSpeed -= speedAdjRate;
        	}
        else {							// veering left
        			rightSpeed -= speedAdjRate;
        }
	}
	else if (m_distance < 0){ // if going reverse
			if (GetYaw() > angle_err) {  //veering right
			        leftSpeed += speedAdjRate;
			}
			else {						// veering left
					rightSpeed += speedAdjRate;
			}
		}
	}

	if (m_distance < 0) {	// in reverse motor speed is negative
		leftSpeed *= -1.0;
		rightSpeed *= -1.0;
	}

	Robot::drive->TankDrive(leftSpeed, rightSpeed);

}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousDriveStraight::IsFinished() {
	double driveEncVal = Robot::drive->GetLeftEncoderValue();
	if(m_distance-driveEncVal < .5){
		return true;
	}
	else{
		return false;
	}
}

// Called once after isFinished returns true
void AutonomousDriveStraight::End() {
	Robot::drive->TankDrive(0.0, 0.0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousDriveStraight::Interrupted() {

}
