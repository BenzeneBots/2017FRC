// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Liftoff.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Liftoff::Liftoff(int liftState): Command() {
    m_liftState = liftState;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::climber.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Liftoff::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void Liftoff::Execute() {

	switch ( m_liftState ) {

	// This is the only case where the motor gets turned on.
	case climb:
		RobotMap::climber_spoolM1->Set( 1.0 );	// Run Motor 100% to climb.
		SetTimeout( 10.0 );						// Limit lift time to X seconds.
		break;

	// On any of these cases, stop the motor!
	case idle:
	case stop:
	case abort:
	default:
		RobotMap::climber_spoolM1->Set( 0.0 );	// Stop Motor by setting to zero output.
		break;
	}
}
// Make this return true when this Command no longer needs to run execute()
bool Liftoff::IsFinished() {
	// ToDo: How will we know when to stop the climber spool motor?
    return IsTimedOut() || RobotMap::climber_EndofRopeLimitSW;
}

// Called once after isFinished returns true
void Liftoff::End() {
	RobotMap::climber_spoolM1->Set( 0.0 );	// Stop Motor by setting to zero output.
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Liftoff::Interrupted() {
	// Stop the spool motor when interrupted.
	RobotMap::climber_spoolM1->Set( 0.0 );	// Stop Motor by setting to zero output.
}
