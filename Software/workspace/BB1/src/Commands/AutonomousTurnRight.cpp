// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousTurnRight.h"
#include "Pigeon.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousTurnRight::AutonomousTurnRight(int angle): Command() {
    m_angle = angle;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drive.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousTurnRight::Initialize() {
	Pigeon::ResetYaw(); //resets the gyro to see the starting position as 0.
	Robot::drive->ResetEncoders();

	leftTurnSpeed = -0.283; //-.236
	rightTurnSpeed = -0.283;//-.283
}

// Called repeatedly when this Command is scheduled to run
void AutonomousTurnRight::Execute() {
	double leftEncVal = Robot::drive->GetLeftEncoderValue();
	double rightEncVal = Robot::drive->GetRightEncoderValue();

		//compare left and right sides to make sure they're going the same amount
		if(leftEncVal + rightEncVal > .3){ //left encoder moved too much relative to right
			leftTurnSpeed -= 0.003;
		}
		else if(leftEncVal + rightEncVal < -.3){//right encoder moved too much relative to left
			rightTurnSpeed -= 0.003;
		}


		Robot::drive->TankDrive(leftTurnSpeed, -1.0 * rightTurnSpeed);}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousTurnRight::IsFinished() {
	double yaw = Pigeon::GetYaw();
	if(abs(m_angle - (-1.0 * yaw)) < 2.5){	//is the angle within 2 degrees of the set point?
	return true;							//^^needed to multiply by -1.0 since the yaw is negative when turning to right
	}
	else return false;
}

// Called once after isFinished returns true
void AutonomousTurnRight::End() {
	Robot::drive->TankDrive(0.0, 0.0);
	Robot::drive->ResetEncoders();


	//::initYaw = Pigeon::GetYaw();
	frc::Wait(.5);
	//Pigeon::ResetYaw();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousTurnRight::Interrupted() {

}
