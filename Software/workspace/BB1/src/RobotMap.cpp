// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveLeft;
std::shared_ptr<SpeedController> RobotMap::driveRight;
std::shared_ptr<RobotDrive> RobotMap::driveDrivetrain;
std::shared_ptr<SpeedController> RobotMap::driveStrafe;
std::shared_ptr<SpeedController> RobotMap::intakeIntakeMotor;
std::shared_ptr<CANTalon> RobotMap::shooterShooterMotor;
std::shared_ptr<Servo> RobotMap::shooterHood;
std::shared_ptr<SpeedController> RobotMap::climberClimberMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveLeft.reset(new VictorSP(0));
    lw->AddActuator("Drive", "Left", std::static_pointer_cast<VictorSP>(driveLeft));
    
    driveRight.reset(new VictorSP(1));
    lw->AddActuator("Drive", "Right", std::static_pointer_cast<VictorSP>(driveRight));
    
    driveDrivetrain.reset(new RobotDrive(driveLeft, driveRight));
    
    driveDrivetrain->SetSafetyEnabled(true);
        driveDrivetrain->SetExpiration(0.1);
        driveDrivetrain->SetSensitivity(0.5);
        driveDrivetrain->SetMaxOutput(1.0);

        driveDrivetrain->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
    driveStrafe.reset(new VictorSP(2));
    lw->AddActuator("Drive", "Strafe", std::static_pointer_cast<VictorSP>(driveStrafe));
    
    intakeIntakeMotor.reset(new VictorSP(3));
    lw->AddActuator("Intake", "IntakeMotor", std::static_pointer_cast<VictorSP>(intakeIntakeMotor));
    
    shooterShooterMotor.reset(new CANTalon(10));
    lw->AddActuator("Shooter", "ShooterMotor", shooterShooterMotor);
    
    shooterHood.reset(new Servo(9));
    lw->AddActuator("Shooter", "Hood", shooterHood);
    
    climberClimberMotor.reset(new VictorSP(5));
    lw->AddActuator("Climber", "Climber Motor", std::static_pointer_cast<VictorSP>(climberClimberMotor));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
