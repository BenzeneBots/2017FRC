// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Drive.h"
#include "../RobotMap.h"
#include "Commands/DriveWithJoysticks.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drive::Drive() : Subsystem("Drive") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    left = RobotMap::driveLeft;
    right = RobotMap::driveRight;
    drivetrain = RobotMap::driveDrivetrain;
    leftDriveEncoder = RobotMap::driveLeftDriveEncoder;
    rightDriveEncoder = RobotMap::driveRightDriveEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Drive::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithJoysticks(0, 0, 0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Drive::ArcadeDriveJoystick(double speed, double rotation){
	drivetrain->ArcadeDrive(speed, 0.5 * rotation, false);	//Murali: Sets drive to the speed and rotation values
}

void Drive::TankDrive(double left, double right){
	drivetrain->TankDrive(left, right, false);
}

void Drive::stop(){
	drivetrain->ArcadeDrive(0.0, 0.0);
}

double Drive::GetLeftEncoderValue(){
	double dist = leftDriveEncoder->GetDistance();
	return dist;
}

double Drive::GetRightEncoderValue(){
	double dist = rightDriveEncoder->GetDistance();
	return dist;
}

void Drive::ResetEncoders(){
	leftDriveEncoder->Reset();
	rightDriveEncoder->Reset();
}

